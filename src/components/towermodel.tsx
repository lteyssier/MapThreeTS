/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
  };
  materials: {
    ["Scene_-_Root"]: THREE.MeshStandardMaterial;
    ["Scene_-_Root"]: THREE.MeshStandardMaterial;
    ["Scene_-_Root"]: THREE.MeshStandardMaterial;
  };
};

export function Eiffel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/eiffel.glb"
  ) as GLTFResult;
  return (
    <group {...props} dispose={null} >
     <group scale={80}  position={[0,0,0]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials["Scene_-_Root"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_5.geometry}
        material={materials["Scene_-_Root"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials["Scene_-_Root"]}
      />
      </group>   
    </group>
  );
}

useGLTF.preload("/eiffel.glb");
